#!/usr/bin/env node

'use strict';

const config = require('../configuration');
const async = require('async');
const ProgressBar = require('progress');
const db = require('../database/databaseConnection');
const users = require('../solr/collections/users');
const decktree = require('../solr/collections/decktree');

function index(collection, indexFunction){
    let limit = 50;
    let allowErrors = 20;

    return db.getTotalCount(collection).then( (totalCount) => {
        let offset = 0;
        let progressBar = new ProgressBar(`Indexed :current out of :total ${collection} (ETA: :eta sec) [:bar] :percent`, { total: totalCount });
        return new Promise( (resolve, reject) => {

            async.doWhilst(
                (callback) => {
                    db.getAll(collection, offset, limit, { _id: 1 }).then( (docs) => {
                        async.eachSeries(docs, (doc, innerCallback) => {
                            progressBar.tick();
                            indexFunction(doc).then( () => {
                                innerCallback();
                            }).catch( (err) => {
                                console.warn(err.message);

                                // if there are too many errors, reject promise
                                if(--allowErrors === 0){
                                    reject('Too many errors, please check configuration and try again');
                                }
                                innerCallback();
                            });
                        }, () => {
                            offset += limit;
                            callback();
                        });
                    }).catch( (err) => {
                        callback(err);
                    });
                },
                () => { return offset <= totalCount; },
                (err) => { 
                    if(err)
                        return reject(err);
                    resolve();
                }
            );
        });
    });
}


let collectionsToIndex = [
    { name: 'users', indexMethod: users.insert.bind(this) },
    { name: 'decks', indexMethod: decktree.index.bind(this) }
];

async.eachSeries(collectionsToIndex, (col, callback) => {
    console.log();
    index(col.name, col.indexMethod).then( (res) => {
        callback();
    }).catch( (err) => {
        callback(err);
    });
}, (err) => {
    if(err){
        console.log(err);
        process.exit(-1);
    }

    console.log('Initial index has been successfully completed');
    process.exit(0);
});